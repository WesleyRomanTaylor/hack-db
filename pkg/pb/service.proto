syntax = "proto3";

package service;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

import "github.com/infobloxopen/atlas-app-toolkit/query/collection_operators.proto";
import "github.com/infobloxopen/protoc-gen-gorm/options/gorm.proto";
import "github.com/infobloxopen/protoc-gen-gorm/types/types.proto";

option go_package = "github.com/brocwoodworthIBLX/hack-db/pkg/pb;pb";

// ------------------- Messages -------------------

message Tool {
  option (gorm.opts).ormable = true;
  gorm.types.UUIDValue id = 1;
  string title = 2;
  string tool_code = 3;
  string created_by = 4;
  string description = 5;
  repeated string tags = 6;
  int32 vote_count = 7;
  int32 broken_count = 8;
}

message Tag {
  option (gorm.opts).ormable = true;
  gorm.types.UUIDValue id = 1;
  string name = 2;
  repeated gorm.types.UUIDValue tool_id = 3;
}

message Comment {
  option (gorm.opts).ormable = true;
  gorm.types.UUIDValue id = 1;
  string comment = 2;
  string created_by = 3;
  gorm.types.UUIDValue tool_id = 4;
}

message CreateToolRequest {
  Tool payload = 1;
}

message CreateToolResponse {
  Tool result = 1;
}

message ListToolRequest {
  infoblox.api.Filtering filter = 1;
  infoblox.api.Sorting order_by = 2;
  infoblox.api.FieldSelection fields = 3;
  infoblox.api.Pagination paging = 4;
}

message ListToolResponse {
  repeated Tool results = 1;
}

message ReadToolRequest {
  gorm.types.UUIDValue id = 1;
}

message ReadToolResponse {
  Tool result = 1;
}

message UpdateToolRequest {
  Tool payload = 1;
}

message UpdateToolResponse {
  Tool result = 1;
}

message CreateTagRequest {
  Tag payload = 1;
}

message CreateTagResponse {
  Tag result = 1;
}

message ListTagRequest {
  infoblox.api.Filtering filter = 1;
  infoblox.api.Sorting order_by = 2;
  infoblox.api.FieldSelection fields = 3;
  infoblox.api.Pagination paging = 4;
}

message ListTagResponse {
  repeated Tag results = 1;
}

message ReadTagRequest {
  gorm.types.UUIDValue id = 1;
}

message ReadTagResponse {
  Tag result = 1;
}

message CreateCommentRequest {
  Comment payload = 1;
}

message CreateCommentResponse {
  Comment result = 1;
}

message ListCommentRequest {
  gorm.types.UUIDValue tool_id = 1;
}

message ListCommentResponse {
  repeated Comment results = 1;
}

message ReadCommentRequest {
  gorm.types.UUIDValue id = 1;
}

message ReadCommentResponse {
  Comment result = 1;
}

// ------------------- Services -------------------

// Tools

service Tools {
  option (gorm.server) = {
    autogen: true,
    txn_middleware: true,
  };

  rpc Create (CreateToolRequest) returns (CreateToolResponse) {
    option (google.api.http) = {
      post: "/tool"
      body: "payload"
    };
  }

  rpc Update (UpdateToolRequest) returns (UpdateToolResponse) {
    option (google.api.http) = {
      patch: "/tool/{payload.id.value}"
      body: "payload"
    };
  }

  rpc Read(ReadToolRequest) returns (ReadToolResponse) {
    option (google.api.http) = {
      get: "/tool/{id.value}"
    };
  }

  rpc List(ListToolRequest) returns (ListToolResponse) {
    option (google.api.http) = {
      get: "/tool"
    };
  }
}

// Tags

service Tags {
  option (gorm.server) = {
    autogen: true,
    txn_middleware: true,
  };

  rpc Create (CreateTagRequest) returns (CreateTagResponse) {
    option (google.api.http) = {
      post: "/tag"
      body: "payload"
    };
  }

  rpc List(ListTagRequest) returns (ListTagResponse) {
    option (google.api.http) = {
      get: "/tag"
    };
  }

  rpc Read(ReadTagRequest) returns (ReadTagResponse) {
    option (google.api.http) = {
      get: "/tag/{id.value}"
    };
  }
}

// Comments

service Comments {
  option (gorm.server) = {
    autogen: true,
    txn_middleware: true,
  };

  rpc Create (CreateCommentRequest) returns (CreateCommentResponse) {
    option (google.api.http) = {
      post: "/comment"
      body: "payload"
    };
  }

  rpc List(ListCommentRequest) returns (ListCommentResponse) {
    option (google.api.http) = {
      get: "/comment/{tool_id.value}"
    };
  }

  rpc Read(ReadCommentRequest) returns (ReadCommentResponse) {
    option (google.api.http) = {
      get: "/comment/{id.value}"
    };
  }
}