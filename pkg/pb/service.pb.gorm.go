// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/brocwoodworthIBLX/hack-db/pkg/pb/service.proto

// Generated with protoc-gen-gorm version: master
// Anticipating compatibility with atlas-app-toolkit version: master

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	github.com/brocwoodworthIBLX/hack-db/pkg/pb/service.proto

It has these top-level messages:
	Submission
	CreateSubmissionRequest
	CreateSubmissionResponse
	ListSubmissionRequest
	ListSubmissionResponse
	ReadSubmissionRequest
	ReadSubmissionResponse
	UpdateSubmissionRequest
	UpdateSubmissionResponse
*/
package pb

import context "context"
import fmt "fmt"

import errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
import field_mask1 "google.golang.org/genproto/protobuf/field_mask"
import go_uuid1 "github.com/satori/go.uuid"
import gorm1 "github.com/jinzhu/gorm"
import gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
import query1 "github.com/infobloxopen/atlas-app-toolkit/query"
import types1 "github.com/infobloxopen/protoc-gen-gorm/types"

import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "github.com/infobloxopen/atlas-app-toolkit/query"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type SubmissionORM struct {
	Id          *go_uuid1.UUID
	Submission  string
	SubmittedBy string
	Tags        string
	Title       string
	Votes       int32
}

// TableName overrides the default tablename generated by GORM
func (SubmissionORM) TableName() string {
	return "submissions"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Submission) ToORM(ctx context.Context) (SubmissionORM, error) {
	to := SubmissionORM{}
	var err error
	if prehook, ok := interface{}(m).(SubmissionWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		tempUUID, uErr := go_uuid1.FromString(m.Id.Value)
		if uErr != nil {
			return to, uErr
		}
		to.Id = &tempUUID
	}
	to.Title = m.Title
	to.Submission = m.Submission
	to.SubmittedBy = m.SubmittedBy
	to.Tags = m.Tags
	to.Votes = m.Votes
	if posthook, ok := interface{}(m).(SubmissionWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *SubmissionORM) ToPB(ctx context.Context) (Submission, error) {
	to := Submission{}
	var err error
	if prehook, ok := interface{}(m).(SubmissionWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id = &types1.UUIDValue{Value: m.Id.String()}
	}
	to.Title = m.Title
	to.Submission = m.Submission
	to.SubmittedBy = m.SubmittedBy
	to.Tags = m.Tags
	to.Votes = m.Votes
	if posthook, ok := interface{}(m).(SubmissionWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Submission the arg will be the target, the caller the one being converted from

// SubmissionBeforeToORM called before default ToORM code
type SubmissionWithBeforeToORM interface {
	BeforeToORM(context.Context, *SubmissionORM) error
}

// SubmissionAfterToORM called after default ToORM code
type SubmissionWithAfterToORM interface {
	AfterToORM(context.Context, *SubmissionORM) error
}

// SubmissionBeforeToPB called before default ToPB code
type SubmissionWithBeforeToPB interface {
	BeforeToPB(context.Context, *Submission) error
}

// SubmissionAfterToPB called after default ToPB code
type SubmissionWithAfterToPB interface {
	AfterToPB(context.Context, *Submission) error
}

// DefaultCreateSubmission executes a basic gorm create call
func DefaultCreateSubmission(ctx context.Context, in *Submission, db *gorm1.DB) (*Submission, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SubmissionORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SubmissionORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type SubmissionORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type SubmissionORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadSubmission executes a basic gorm read call
func DefaultReadSubmission(ctx context.Context, in *Submission, db *gorm1.DB) (*Submission, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == nil || *ormObj.Id == go_uuid1.Nil {
		return nil, errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(SubmissionORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &SubmissionORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SubmissionORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := SubmissionORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(SubmissionORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type SubmissionORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type SubmissionORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type SubmissionORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteSubmission(ctx context.Context, in *Submission, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == nil || *ormObj.Id == go_uuid1.Nil {
		return errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(SubmissionORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&SubmissionORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(SubmissionORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type SubmissionORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type SubmissionORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteSubmissionSet(ctx context.Context, in []*Submission, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	var err error
	keys := []*go_uuid1.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == nil || *ormObj.Id == go_uuid1.Nil {
			return errors1.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&SubmissionORM{})).(SubmissionORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&SubmissionORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&SubmissionORM{})).(SubmissionORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type SubmissionORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Submission, *gorm1.DB) (*gorm1.DB, error)
}
type SubmissionORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Submission, *gorm1.DB) error
}

// DefaultStrictUpdateSubmission clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateSubmission(ctx context.Context, in *Submission, db *gorm1.DB) (*Submission, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateSubmission")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &SubmissionORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(SubmissionORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(SubmissionORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SubmissionORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type SubmissionORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type SubmissionORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type SubmissionORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchSubmission executes a basic gorm update call with patch behavior
func DefaultPatchSubmission(ctx context.Context, in *Submission, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*Submission, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	var pbObj Submission
	var err error
	if hook, ok := interface{}(&pbObj).(SubmissionWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadSubmission(ctx, &Submission{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(SubmissionWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskSubmission(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(SubmissionWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateSubmission(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(SubmissionWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type SubmissionWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Submission, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type SubmissionWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Submission, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type SubmissionWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Submission, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type SubmissionWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Submission, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultPatchSetSubmission executes a bulk gorm update call with patch behavior
func DefaultPatchSetSubmission(ctx context.Context, objects []*Submission, updateMasks []*field_mask1.FieldMask, db *gorm1.DB) ([]*Submission, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors1.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Submission, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchSubmission(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskSubmission patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskSubmission(ctx context.Context, patchee *Submission, patcher *Submission, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*Submission, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Title" {
			patchee.Title = patcher.Title
			continue
		}
		if f == prefix+"Submission" {
			patchee.Submission = patcher.Submission
			continue
		}
		if f == prefix+"SubmittedBy" {
			patchee.SubmittedBy = patcher.SubmittedBy
			continue
		}
		if f == prefix+"Tags" {
			patchee.Tags = patcher.Tags
			continue
		}
		if f == prefix+"Votes" {
			patchee.Votes = patcher.Votes
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListSubmission executes a gorm list call
func DefaultListSubmission(ctx context.Context, db *gorm1.DB, f *query1.Filtering, s *query1.Sorting, p *query1.Pagination, fs *query1.FieldSelection) ([]*Submission, error) {
	in := Submission{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SubmissionORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db, f, s, p, fs); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &SubmissionORM{}, &Submission{}, f, s, p, fs)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SubmissionORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db, f, s, p, fs); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []SubmissionORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SubmissionORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse, f, s, p, fs); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Submission{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type SubmissionORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB, *query1.Filtering, *query1.Sorting, *query1.Pagination, *query1.FieldSelection) (*gorm1.DB, error)
}
type SubmissionORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB, *query1.Filtering, *query1.Sorting, *query1.Pagination, *query1.FieldSelection) (*gorm1.DB, error)
}
type SubmissionORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]SubmissionORM, *query1.Filtering, *query1.Sorting, *query1.Pagination, *query1.FieldSelection) error
}
type SubmissionsDefaultServer struct {
}

// Create ...
func (m *SubmissionsDefaultServer) Create(ctx context.Context, in *CreateSubmissionRequest) (*CreateSubmissionResponse, error) {
	txn, ok := gorm2.FromContext(ctx)
	if !ok {
		return nil, errors1.NoTransactionError
	}
	db := txn.Begin()
	if db.Error != nil {
		return nil, db.Error
	}
	if custom, ok := interface{}(in).(SubmissionsSubmissionWithBeforeCreate); ok {
		var err error
		if db, err = custom.BeforeCreate(ctx, db); err != nil {
			return nil, err
		}
	}
	res, err := DefaultCreateSubmission(ctx, in.GetPayload(), db)
	if err != nil {
		return nil, err
	}
	out := &CreateSubmissionResponse{Result: res}
	if custom, ok := interface{}(in).(SubmissionsSubmissionWithAfterCreate); ok {
		var err error
		if err = custom.AfterCreate(ctx, out, db); err != nil {
			return nil, err
		}
	}
	return out, nil
}

// SubmissionsSubmissionWithBeforeCreate called before DefaultCreateSubmission in the default Create handler
type SubmissionsSubmissionWithBeforeCreate interface {
	BeforeCreate(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// SubmissionsSubmissionWithAfterCreate called before DefaultCreateSubmission in the default Create handler
type SubmissionsSubmissionWithAfterCreate interface {
	AfterCreate(context.Context, *CreateSubmissionResponse, *gorm1.DB) error
}

// Update ...
func (m *SubmissionsDefaultServer) Update(ctx context.Context, in *UpdateSubmissionRequest) (*UpdateSubmissionResponse, error) {
	var err error
	var res *Submission
	txn, ok := gorm2.FromContext(ctx)
	if !ok {
		return nil, errors1.NoTransactionError
	}
	db := txn.Begin()
	if db.Error != nil {
		return nil, db.Error
	}
	if custom, ok := interface{}(in).(SubmissionsSubmissionWithBeforeUpdate); ok {
		var err error
		if db, err = custom.BeforeUpdate(ctx, db); err != nil {
			return nil, err
		}
	}
	res, err = DefaultStrictUpdateSubmission(ctx, in.GetPayload(), db)
	if err != nil {
		return nil, err
	}
	out := &UpdateSubmissionResponse{Result: res}
	if custom, ok := interface{}(in).(SubmissionsSubmissionWithAfterUpdate); ok {
		var err error
		if err = custom.AfterUpdate(ctx, out, db); err != nil {
			return nil, err
		}
	}
	return out, nil
}

// SubmissionsSubmissionWithBeforeUpdate called before DefaultUpdateSubmission in the default Update handler
type SubmissionsSubmissionWithBeforeUpdate interface {
	BeforeUpdate(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// SubmissionsSubmissionWithAfterUpdate called before DefaultUpdateSubmission in the default Update handler
type SubmissionsSubmissionWithAfterUpdate interface {
	AfterUpdate(context.Context, *UpdateSubmissionResponse, *gorm1.DB) error
}

// Read ...
func (m *SubmissionsDefaultServer) Read(ctx context.Context, in *ReadSubmissionRequest) (*ReadSubmissionResponse, error) {
	txn, ok := gorm2.FromContext(ctx)
	if !ok {
		return nil, errors1.NoTransactionError
	}
	db := txn.Begin()
	if db.Error != nil {
		return nil, db.Error
	}
	if custom, ok := interface{}(in).(SubmissionsSubmissionWithBeforeRead); ok {
		var err error
		if db, err = custom.BeforeRead(ctx, db); err != nil {
			return nil, err
		}
	}
	res, err := DefaultReadSubmission(ctx, &Submission{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	out := &ReadSubmissionResponse{Result: res}
	if custom, ok := interface{}(in).(SubmissionsSubmissionWithAfterRead); ok {
		var err error
		if err = custom.AfterRead(ctx, out, db); err != nil {
			return nil, err
		}
	}
	return out, nil
}

// SubmissionsSubmissionWithBeforeRead called before DefaultReadSubmission in the default Read handler
type SubmissionsSubmissionWithBeforeRead interface {
	BeforeRead(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// SubmissionsSubmissionWithAfterRead called before DefaultReadSubmission in the default Read handler
type SubmissionsSubmissionWithAfterRead interface {
	AfterRead(context.Context, *ReadSubmissionResponse, *gorm1.DB) error
}

// List ...
func (m *SubmissionsDefaultServer) List(ctx context.Context, in *ListSubmissionRequest) (*ListSubmissionResponse, error) {
	txn, ok := gorm2.FromContext(ctx)
	if !ok {
		return nil, errors1.NoTransactionError
	}
	db := txn.Begin()
	if db.Error != nil {
		return nil, db.Error
	}
	if custom, ok := interface{}(in).(SubmissionsSubmissionWithBeforeList); ok {
		var err error
		if db, err = custom.BeforeList(ctx, db); err != nil {
			return nil, err
		}
	}
	res, err := DefaultListSubmission(ctx, db, in.Filter, in.OrderBy, in.Paging, in.Fields)
	if err != nil {
		return nil, err
	}
	out := &ListSubmissionResponse{Results: res}
	if custom, ok := interface{}(in).(SubmissionsSubmissionWithAfterList); ok {
		var err error
		if err = custom.AfterList(ctx, out, db); err != nil {
			return nil, err
		}
	}
	return out, nil
}

// SubmissionsSubmissionWithBeforeList called before DefaultListSubmission in the default List handler
type SubmissionsSubmissionWithBeforeList interface {
	BeforeList(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// SubmissionsSubmissionWithAfterList called before DefaultListSubmission in the default List handler
type SubmissionsSubmissionWithAfterList interface {
	AfterList(context.Context, *ListSubmissionResponse, *gorm1.DB) error
}
